// Mocks generated by Mockito 5.4.0 from annotations
// in fitnesstracker/test/unit/diet/diet_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:fitnesstracker/domain/diet/diet_failures.dart' as _i6;
import 'package:fitnesstracker/domain/diet/i_diet_repository.dart' as _i4;
import 'package:fitnesstracker/infrastructure/diet/diet_dto.dart' as _i3;
import 'package:fitnesstracker/infrastructure/diet/diet_form_dto.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDietDto_1 extends _i1.SmartFake implements _i3.DietDto {
  _FakeDietDto_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IDietRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDietRepository extends _i1.Mock implements _i4.IDietRepository {
  MockIDietRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.DietDto>> getAllDiet() => (super.noSuchMethod(
        Invocation.method(
          #getAllDiet,
          [],
        ),
        returnValue: _i5.Future<List<_i3.DietDto>>.value(<_i3.DietDto>[]),
      ) as _i5.Future<List<_i3.DietDto>>);
  @override
  _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>> create(
          _i7.DietFormDto? dietFormDto) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [dietFormDto],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>>.value(
            _FakeEither_0<_i6.DietFailure, _i2.Unit>(
          this,
          Invocation.method(
            #create,
            [dietFormDto],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>> update(
          _i7.DietFormDto? dietFormDto) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [dietFormDto],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>>.value(
            _FakeEither_0<_i6.DietFailure, _i2.Unit>(
          this,
          Invocation.method(
            #update,
            [dietFormDto],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>>);
  @override
  _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>> delete(int? dietId) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [dietId],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>>.value(
            _FakeEither_0<_i6.DietFailure, _i2.Unit>(
          this,
          Invocation.method(
            #delete,
            [dietId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.DietFailure, _i2.Unit>>);
  @override
  _i5.Future<_i3.DietDto> getDiet(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getDiet,
          [id],
        ),
        returnValue: _i5.Future<_i3.DietDto>.value(_FakeDietDto_1(
          this,
          Invocation.method(
            #getDiet,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.DietDto>);
}
