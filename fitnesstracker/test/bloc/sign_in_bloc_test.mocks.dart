// Mocks generated by Mockito 5.4.0 from annotations
// in fitnesstracker/test/bloc/sign_in_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:fitnesstracker/domain/auth/auth_failure.dart' as _i6;
import 'package:fitnesstracker/domain/auth/i_auth_repository.dart' as _i3;
import 'package:fitnesstracker/domain/auth/user.dart' as _i5;
import 'package:fitnesstracker/domain/auth/value_objects.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOption_0<A> extends _i1.SmartFake implements _i2.Option<A> {
  _FakeOption_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthRepository extends _i1.Mock implements _i3.IAuthRepository {
  MockIAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Option<_i5.User>> getSignedInUser() => (super.noSuchMethod(
        Invocation.method(
          #getSignedInUser,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Option<_i5.User>>.value(_FakeOption_0<_i5.User>(
          this,
          Invocation.method(
            #getSignedInUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Option<_i5.User>>);
  @override
  _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>> register({
    required _i7.Name? name,
    required _i7.EmailAddress? emailAddress,
    required _i7.Password? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #name: name,
            #emailAddress: emailAddress,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>.value(
            _FakeEither_1<_i6.AuthFailure, _i2.Unit>(
          this,
          Invocation.method(
            #register,
            [],
            {
              #name: name,
              #emailAddress: emailAddress,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>> signIn({
    required _i7.EmailAddress? emailAddress,
    required _i7.Password? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #emailAddress: emailAddress,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>.value(
            _FakeEither_1<_i6.AuthFailure, _i2.Unit>(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #emailAddress: emailAddress,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>.value(
            _FakeEither_1<_i6.AuthFailure, _i2.Unit>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>> changePassword(
          String? newPassword) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [newPassword],
        ),
        returnValue: _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>.value(
            _FakeEither_1<_i6.AuthFailure, _i2.Unit>(
          this,
          Invocation.method(
            #changePassword,
            [newPassword],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i6.AuthFailure, _i2.Unit>>);
}
